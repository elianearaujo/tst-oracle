#!/usr/bin/env python
# coding: utf-8
# TST-Online Command Line Oracle
#
# Eliane Araujo, 2016
# TST Oracle -- Permite verificar se entradas e saídas, fornecidas pelo usuário, são válidas para o programa.

from __future__ import print_function
from __future__ import unicode_literals

import os
import sys
import json
import shlex
import subprocess

import tstlib as tst

def get_filename(opt):
    # was reference or io file provided in command line?
    if len(sys.argv) < 3:
        print("syntax: tst_oracle [solref.py] [io.json]", file=sys.stderr)
        sys.exit(1)

    filename = sys.argv[1] if opt == "reference" else sys.argv[2]

    if not os.path.exists(filename):
        print("tst_oracle: %s: no such file" % filename, file=sys.stderr)
        sys.exit(1)
        
    return filename
    
def run_test_command(reference, tstjson):
    
    command_line = "tst test -f %s -o json %s" % (tstjson, reference)

    cmd = shlex.split(command_line.encode('utf-8'))
    try:
        return subprocess.check_output(cmd)
    except subprocess.CalledProcessError:
        pass
    except OSError:
        print("tst_orcale: unknown command '%s'" % command, file=sys.stderr)
        print(cmd)

def oracle_eval(results):
    
    ev = {
        "input_is_valid": "",
        "output_is_valid": "",
        "user_input": results.get("input"),
        "user_output": results.get("output"),
        "output": results.get("stdout"),
        "test_status": results.get("summary")
    }
    # input_is_valid if tests_results: "Success": ".", "NormalizedSuccess": "*" or "Fail": "F" and False otherwise.
    summary = results.get("summary")
    
    ev["input_is_valid"] = True if summary in ".*F" else False
    
    if summary == ".":
        # output_is_valid if tests_results: "Success": "."    
        ev["output_is_valid"] = True
        
    elif summary in "*F" and results.get("output"):
        # not output_is_valid in case of failure
        ev["output_is_valid"] = False
    else:
        # output_is_valid is undefined when it cannot be executed or not provided by user.
        ev["output_is_valid"] = None
        
    return ev

def pack_results(results):
    
    result = json.loads(results)
    
    # perform oracle evaluation
    out = oracle_eval( result[0]["tests"][0])
    json_output = tst.data2json(out)
    
    return json_output


def main():

    # read reference and test files
    reference =  get_filename("reference")
    tests =  get_filename("tests")
    
    #run tst test
    results = run_test_command(reference, tests)
    
    # pack output
    json_output = pack_results(results) 
    
    print( json_output )

if __name__ == "__main__":
    
    if len(sys.argv) > 1 and sys.argv[1] == '--one-line-help':
        print("verify if provided input and output are valid")
        sys.exit()

    if len(sys.argv) < 3:
        print("Usage: tst_oracle.py reference.py valid_io.json")
        sys.exit()
     
    main()
